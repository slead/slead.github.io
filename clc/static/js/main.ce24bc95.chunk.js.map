{"version":3,"sources":["components/Sidebar.js","modules/layers.js","config/mapConfig.js","config/layerConfig.js","modules/search.js","components/Explore.js","components/App.js","index.js"],"names":["Sidebar","React","Component","loadLayers","view","loadModules","then","Expand","LayerList","BasemapGallery","FeatureLayer","console","log","layerOptions","opacity","clcLayers","id","alias","url","fieldInfos","name","searchParams","searchFields","placeholder","forEach","clcLayerDef","layer","title","visible","layerDef","map","add","push","mapLayers","Search","Locator","GraphicsLayer","Graphic","searchSources","locator","countryCode","singleLineFieldName","localSearchOptions","minScale","distance","maxResults","maxSuggestions","suggestionsEnabled","minSuggestCharacters","undefined","searchSource","exactMatch","searchWidget","sources","reverse","includeDefaultSources","ui","position","buffersGraphicsLayer","listMode","graphicsLayer","on","event","removeAll","graphic","geometry","result","feature","attributes","symbol","type","style","color","size","width","configureSearch","layerList","expandIconClass","expandTooltip","content","basemapGallery","catch","err","error","MainMap","props","state","handleMapLoad","bind","handleFail","className","onLoad","this","onFail","mapProperties","basemap","viewProperties","center","zoom","setState","e","status","App","Container","fluid","Row","Col","xs","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce24bc95.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Sidebar extends React.Component {\n\n    render() {\n        return (\n\n            <h1>This is the sidebar</h1>\n        )\n    }\n\n}\n\nexport { Sidebar }\n","import { mapConfig } from '../config/mapConfig.js';\nimport { layerConfig } from '../config/layerConfig.js';\nimport { configureSearch } from '../modules/search.js';\nimport { loadModules } from 'esri-loader';\n\nconst loadLayers = (view) => {\n  loadModules([\"esri/widgets/Expand\", \"esri/widgets/LayerList\", \"esri/widgets/BasemapGallery\", \"esri/layers/FeatureLayer\"])\n    .then(([Expand, LayerList, BasemapGallery, FeatureLayer]) => {\n      console.log('load layers')\n\n      // Default options added to all layers\n      let layerOptions = mapConfig().layerOptions;\n\n      // Load the region layers first so they draw first\n      let clcLayers = [];\n      layerConfig().clcLayers.forEach(clcLayerDef => {\n\n        let layer = new FeatureLayer(clcLayerDef.url, {...layerOptions, ...clcLayerDef});\n        layer.title = clcLayerDef.alias || clcLayerDef.name;\n        layer.visible = clcLayerDef.visible;\n        layer.layerDef = clcLayerDef;\n        clcLayerDef.layer = layer;\n        view.map.add(layer)\n        clcLayers.push(clcLayerDef);\n      });\n      // this.handleclcLayersChange(clcLayers);\n\n      // Load these layers into the search widget\n      configureSearch(view, [...clcLayers]); //, ...locationLayers]);\n\n      // Add the layer List widget\n      var layerList = new Expand({\n        expandIconClass: \"esri-icon-layer-list\",  // see https://developers.arcgis.com/javascript/latest/guide/esri-icon-font/\n        expandTooltip: \"Expand LayerList\", // optional, defaults to \"Expand\" for English locale\n        view: view,\n        content: new LayerList({\n          view: view\n        })\n      });\n      view.ui.add(layerList, \"top-left\");\n\n      var basemapGallery = new Expand({\n        expandIconClass: \"esri-icon-basemap\",\n        view: view,\n        content: new BasemapGallery({\n          view: view\n        })\n      });\n      view.ui.add(basemapGallery, \"bottom-right\");\n\n    })\n    .catch(err => {\n      // handle any errors\n      console.error(err);\n    });\n}\n\nexport { loadLayers };\n","\nconst mapConfig = () => {\n\n  return {\n\n    basemapId: \"gray-vector\",\n    center: [147.3688683, -31.934736],\n    zoom: 10,\n\n    layerOptions: {\n      opacity: 0.5\n    },\n\n    highlightOptions: {\n      color: \"#fff568\",\n      width: \"8px\"\n    }\n\n  }\n}\n\nexport { mapConfig }\n","\nconst layerConfig = () => {\n\n  return {\n\n    clcLayers: [\n      {\n        id: \"crown-reserves\",\n        alias: \"Crown Reserves\",\n        url: \"https://spatial.industry.nsw.gov.au/arcgis/rest/services/CrownLands/CrownEstate_CrownView/MapServer/2\",\n        fieldInfos: [\n          {name: \"crownlregno\", alias: \"L Reg number\"},\n          {name: \"classsubtype_desc\", alias: \"Class Subtype\"},\n          {name: \"crownaccounttype_desc\", alias: \"Crown Account Type\"},\n          {name: \"description\", alias: \"Description\"},\n          {name: \"crownclasssubtype_desc\", alias: \"Crown Class Subtype\"},\n          {name: \"crownlandstatustype_desc\", alias: \"Crown Land Statustype\"},\n          {name: \"disposalstatus_desc\", alias: \"Disposal Status\"}\n        ],\n        searchParams: {\n          searchFields: [\"crownlregno\"],\n          placeholder: \"example: R29031\"\n        }\n      },\n      {\n        id: \"crown-land\",\n        alias: \"Crown Land\",\n        url: \"https://spatial.industry.nsw.gov.au/arcgis/rest/services/CrownLands/CrownEstate_CrownView/MapServer/27\"\n      }\n    ]\n\n  }\n}\n\nexport { layerConfig }\n","import { mapConfig } from '../config/mapConfig.js';\nimport { loadModules } from 'esri-loader';\n\nconst configureSearch = (view, mapLayers) => {\n\n  loadModules([\n    \"esri/widgets/Search\",\n    \"esri/tasks/Locator\",\n    \"esri/widgets/Expand\",\n    \"esri/layers/GraphicsLayer\",\n    \"esri/Graphic\"])\n    .then(([\n      Search,\n      Locator,\n      Expand,\n      GraphicsLayer,\n      Graphic\n    ]) => {\n\n      console.log('search')\n\n    // Search widget is based on any layer with searchParams in its config file\n    let searchSources = [\n      {\n        locator: new Locator({ url: \"https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer\"}),\n        countryCode:\"AUS\",\n        singleLineFieldName: \"SingleLine\",\n        name: \"Australian Geocoding Service\",\n        localSearchOptions: {\n          minScale: 300000,\n          distance: 50000\n        },\n        placeholder: \"Search for a location\",\n        maxResults: 3,\n        maxSuggestions: 6,\n        suggestionsEnabled: true,\n        minSuggestCharacters: 0\n      }\n    ];\n    mapLayers.forEach(layerDef => {\n      if (layerDef.searchParams !== undefined){\n        let searchSource = layerDef.searchParams;\n        searchSource.layer = layerDef.layer;\n        searchSource.name = layerDef.alias || layerDef.name;\n        searchSource.exactMatch = false;\n        searchSources.push(searchSource);\n      }\n    });\n\n    let searchWidget = new Search({\n      view: view,\n      sources: searchSources.reverse(),\n      includeDefaultSources: false\n    });\n\n    view.ui.add(searchWidget, {\n      position: \"top-right\"\n    });\n\n    let buffersGraphicsLayer = new GraphicsLayer({\n      listMode: \"hide\"\n    });\n    view.map.add(buffersGraphicsLayer);\n    view.map.graphicsLayer = buffersGraphicsLayer;\n\n    searchWidget.on(\"select-result\", function(event){\n      view.map.graphicsLayer.removeAll();\n      // This could be a hook to run a manual search, and trigger the popup\n      // once the search result has been chosen\n      console.log(\"The selected search result: \", event);\n\n      let graphic = new Graphic({\n        geometry: event.result.feature.geometry,\n        attributes: event.result.feature.attributes\n      })\n\n      // If the source feature is the communities layer, zoom in\n      if (event.result.feature.layer.layerDef && event.result.feature.layer.layerDef.name === 'Communities') {\n\n        graphic.symbol = {\n          type: \"simple-marker\",\n          style: \"circle\",\n          color: \"orange\",\n          size: \"8px\"\n        }\n\n      } else {\n        graphic.symbol = {\n          type: \"simple-line\",\n          color: mapConfig().highlightOptions.color || \"orange\",\n          width: mapConfig().highlightOptions.width || 4\n        };\n      }\n\n      view.map.graphicsLayer.add(graphic)\n    });\n\n    searchWidget.on(\"search-clear\", function(event){\n      view.map.graphicsLayer.removeAll();\n    });\n  })\n}\n\nexport { configureSearch };\n","import React from 'react';\nimport { Map } from '@esri/react-arcgis';\nimport { mapConfig } from \"../config/mapConfig\";\nimport { loadLayers } from \"../modules/layers\";\n\nclass MainMap extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            map: null,\n            view: null\n        };\n\n        this.handleMapLoad = this.handleMapLoad.bind(this)\n        this.handleFail = this.handleFail.bind(this)\n    }\n\n    render() {\n        return <Map\n            className=\"full-screen-map\"\n            onLoad={this.handleMapLoad}\n            onFail={this.handleFail}\n            mapProperties={{ basemap: mapConfig().basemapId }}\n            viewProperties={{\n                center: mapConfig().center,\n                zoom: mapConfig().zoom\n            }}\n        />;\n    }\n\n    handleMapLoad(map, view) {\n        this.setState({ map, view });\n        loadLayers(view)\n    }\n\n    handleFail(e) {\n        console.error(e);\n        this.setState({ status: 'failed' });\n    }\n}\n\nexport { MainMap }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport BurgerMenu from 'react-burger-menu';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Container, Row, Col } from \"react-bootstrap\";\nimport { Sidebar } from \"./Sidebar\";\nimport { MainMap } from \"./Explore\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <Container fluid>\n      <Row>\n        <Col xs={2} id=\"sidebar-wrapper\">\n          <Sidebar />\n        </Col>\n        <Col  xs={10} id=\"page-content-wrapper\">\n          <MainMap/>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}